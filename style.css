html {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif
}

body {
    display: flex;
    flex-direction: column;

    margin: 0;
}

.blue {
    padding: 0 10rem 10rem;
    background-color: #1f2937;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 6rem;
    /* Resizing the window causes the header and hero sections to overflow into padding, wreaking havoc on formatting intentions i.e. keeping things centered. I suspect knowing Grid may help.
    I'm running into problems now that I'm not sure I'm supposed to know how to fix at this point in my education.*/
    margin: 0;
}

h4 {
    font-size: 1.5rem;
    color: #f9faf8;
}

a {
    color: inherit;
    text-decoration: none;
    font-size: 1.125rem;
}

.links {
    display:flex;
    justify-content: space-around;
    gap: 2rem;
    color: #e5e7eb;
    font-size: 1.125rem;
}


.hero {
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 6rem;
    padding-top: 4rem;
}

.hero-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1 1 auto;
    width: 16rem;
    
}

.hero-img {
    display:flex;
    justify-content: center;
    align-items: center;
    width: 16rem;
    flex: 1 0 auto;
    color:#e5e7eb;
    background-color: gray;
}

.img-placeholder {

}

h2 {
    flex-wrap: wrap;
    margin: 0;
    font-size: 3rem;
    color: #f9faf8;
}

.hero-text {
    font-size: 1.125rem;
    color: #e5e7eb;
    flex-wrap: wrap;
}

.signup1 {
    align-self: flex-start;
    padding-inline: 1.3rem;
    padding-block: 0.3rem;
    border-radius: 6px;
    border: none;
    color: #f9faf8;
    background-color: #3882f6;
}

.contain-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 6rem;
}

h3 {
    margin-inline: auto;
    font-size: 2.25rem;
    color: #1f2937;
}

.info-images {
    display: flex;
    justify-content: space-around;
    max-width: 45rem;
    width: 100%
    /* width:100% plus max-width solves viewport issues. space-around makes it look nice in small viewport, and centers content in max viewport given max-width (I think?)*/
}

.illustration {
    max-width: 8.375rem;
    /* keeps subtext in line with image box (incl. border) */
}

.img-box {
    width: 8rem;
    height: 8rem;
    border: #3882f6;
    border-width: 3px;
    border-style: solid;
    border-radius: 13px;
}

.quote-container {
    background-color: #e5e7eb;
    padding: 4rem;
}

.contain-quote {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 45rem;
    margin: auto;
}

.quote {
    flex-wrap: wrap;
    margin: 0;
    color: #1f2937;
    font-size: 2.25rem;
    font-style: italic;
    font-weight: 200;
}

.credit {
    align-self: flex-end;
    margin: 0;
    font-weight: 700;
}

.grift-card {
    align-self: center;
    display: flex;
    gap: 4rem;
    max-width: 35rem;
    width: 65%;
    padding-inline: 5rem;
    padding-block: 2rem;
    margin-block: 3rem;
    color: white;
    background-color: #3882f6;
    border-radius: 8px;
}

.contain-grift {
    flex: 1;
    display: flex;
    flex-direction: column;
    /* a flex basis of >16 caused .signup2 text to wrap due to squish via the gap (as declared in
    .grift-card). Given that:
    .grift-card has hard limits {width: xxx; max-width:xxx; gap: xxx;} and
    .signup2 {text-wrap:nowrap},
    flex-basis can now be set to anything without issue; becomes irrelevant -
    CONTINGENT upon .contain-grift{flex-grow:1}*/
}

.grift-title {
    padding: 0;
    margin:0;
}

.grift-text {
    padding: 0;
    margin:0;
    font-size: 0.75rem;
    min-width: 10rem;
    text-wrap: wrap;
    /* wrap is the default value; this declaration
    is therefore superfluous */
}

.signup2 {
    align-self: center;
    padding-inline: 1.3rem;
    padding-block: 0.3rem;
    border-radius: 6px;
    border: solid;
    border-color: white;
    border-width: 2px;
    text-wrap: nowrap;
    /* nowrap prevents button from vertical resizing
    due to squish, rendering max-height unnecessary */
    color: #f9faf8;
    background-color: #3882f6;

}

.footer-card {
    display: flex;
    justify-content: center;
    background-color:#1f2937;
}

.footer {
    color: white;
}